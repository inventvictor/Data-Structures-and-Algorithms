/*
 * hash_table.c
 *
 *  Created on: Dec 20, 2016
 *      Author: inventor
 */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define ARRAYSIZE 20

int hashCode(int key);
struct dataItem insertData(int key, int value);
void printHashTable();

struct dataItem
{
	int key;
	int value;
	};
struct dataItem *hashArray[ARRAYSIZE] = {};

int main()
{
	printf("Hello Victor");
	insertData(1, 20);
	printHashTable();
	return 0;
	}

int hashCode(int key)
{
	return key % ARRAYSIZE;
	}

struct dataItem insertData(int key, int value)
{
	struct dataItem *item = (struct dataItem *)malloc(sizeof(struct dataItem));
	item->key = key;
	item->value = value;
	int hash = hashCode(key);
	hashArray[hash] = item;
	return NULL;
	}

void printHashTable()
{
	int i = 0;
	for(i = 0; i < ARRAYSIZE; i++)
	{
		if(hashArray[i] == NULL)
		{
			printf(" ~~ ");
		}
		else
		{
			printf("(%d, %d)", hashArray[i].key, hashArray[i].value);
		}
	}
	}

